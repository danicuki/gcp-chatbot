// Generated by CoffeeScript 1.12.7
(function() {
  var DefaultEffect, DualEffect,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  DefaultEffect = require('./defaultEffect');

  DualEffect = (function(superClass) {
    extend(DualEffect, superClass);

    function DualEffect(id, effects) {
      this.id = id;
      this.effects = effects;
    }

    DualEffect.prototype.power = function(base) {
      return base;
    };

    DualEffect.prototype.effectiveness = function(attacker, defender) {
      var effect;
      return this.multiply((function() {
        var i, len, ref, results;
        ref = this.effects;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          effect = ref[i];
          results.push(effect.effectiveness(attacker, defender));
        }
        return results;
      }).call(this));
    };

    DualEffect.prototype.hits = function() {
      var effect;
      return this.max((function() {
        var i, len, ref, results;
        ref = this.effects;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          effect = ref[i];
          results.push(effect.hits());
        }
        return results;
      }).call(this));
    };

    DualEffect.prototype.criticalRateStage = function() {
      var effect;
      return this.max((function() {
        var i, len, ref, results;
        ref = this.effects;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          effect = ref[i];
          results.push(effect.criticalRateStage());
        }
        return results;
      }).call(this));
    };

    DualEffect.prototype.buildMultiplier = function(attacker) {
      var effect;
      return this.multiply((function() {
        var i, len, ref, results;
        ref = this.effects;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          effect = ref[i];
          results.push(effect.buildMultiplier(attacker));
        }
        return results;
      }).call(this));
    };

    DualEffect.prototype.battleMultiplier = function(attacker, defender, damage, lethal) {
      var effect;
      return this.multiply((function() {
        var i, len, ref, results;
        ref = this.effects;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          effect = ref[i];
          results.push(effect.battleMultiplier(attacker, defender, damage, lethal));
        }
        return results;
      }).call(this));
    };

    DualEffect.prototype.afterDamage = function(attacker, defender, damage, log) {
      var effect, i, len, ref, results;
      ref = this.effects;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        effect = ref[i];
        results.push(effect.afterDamage(attacker, defender, damage, log));
      }
      return results;
    };

    DualEffect.prototype.afterMiss = function(attacker, defender, log) {
      var effect, i, len, ref, results;
      ref = this.effects;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        effect = ref[i];
        results.push(effect.afterMiss(attacker, defender, log));
      }
      return results;
    };

    DualEffect.prototype.max = function(list) {
      return Math.max.apply(null, list);
    };

    DualEffect.prototype.multiply = function(list) {
      return list.reduce((function(a, b) {
        return a * b;
      }), 1);
    };

    return DualEffect;

  })(DefaultEffect);

  module.exports = DualEffect;

}).call(this);
