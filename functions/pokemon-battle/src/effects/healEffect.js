// Generated by CoffeeScript 1.12.7
(function() {
  var DefaultEffect, HealEffect,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  DefaultEffect = require('./defaultEffect');

  HealEffect = (function(superClass) {
    extend(HealEffect, superClass);

    function HealEffect() {
      return HealEffect.__super__.constructor.apply(this, arguments);
    }

    HealEffect.prototype.heal = function(damage) {
      switch (this.id) {
        case 4:
        case 348:
          return Math.round(damage * 0.5);
        case 353:
          return Math.round(damage * 0.75);
      }
    };

    HealEffect.prototype.buildMultiplier = function(attacker) {
      switch (this.id) {
        case 4:
        case 348:
          return 1.25;
        case 353:
          return 1.5;
      }
    };

    HealEffect.prototype.battleMultiplier = function(attacker, defender, damage, lethal) {
      if (attacker.hp < attacker.maxHp) {
        return 1 + this.heal(damage) / (attacker.maxHp - attacker.hp) / 1.5;
      } else {
        return 1;
      }
    };

    HealEffect.prototype.afterDamage = function(attacker, defender, damage, log) {
      var heal;
      heal = Math.min(this.heal(damage), attacker.maxHp - attacker.hp);
      if (heal === 0) {
        return;
      }
      attacker.hp += heal;
      return log.message(attacker.trainerAndName() + " healed " + heal + " HP!");
    };

    return HealEffect;

  })(DefaultEffect);

  module.exports = HealEffect;

}).call(this);

//# sourceMappingURL=healEffect.js.map
