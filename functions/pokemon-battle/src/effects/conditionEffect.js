// Generated by CoffeeScript 1.12.7
(function() {
  var ConditionEffect, ConfusionCondition, DefaultEffect, FlinchCondition,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  DefaultEffect = require('./defaultEffect');

  FlinchCondition = require('../conditions/flinchCondition');

  ConfusionCondition = require('../conditions/confusionCondition');

  ConditionEffect = (function(superClass) {
    extend(ConditionEffect, superClass);

    function ConditionEffect() {
      return ConditionEffect.__super__.constructor.apply(this, arguments);
    }

    ConditionEffect.prototype.condition = function() {
      switch (this.id) {
        case 32:
        case 147:
        case 151:
        case 274:
        case 275:
        case 276:
          return new FlinchCondition;
        case 77:
        case 268:
        case 338:
          return new ConfusionCondition;
      }
    };

    ConditionEffect.prototype.buildMultiplier = function(attacker) {
      var condition;
      condition = this.condition();
      return condition.buildMultiplier(attacker, this.chance);
    };

    ConditionEffect.prototype.battleMultiplier = function(attacker, defender, damage, lethal) {
      var condition;
      condition = this.condition();
      if (!condition.isInflicted(defender)) {
        return condition.battleMultiplier(attacker, defender, this.chance);
      } else {
        return 1;
      }
    };

    ConditionEffect.prototype.afterDamage = function(attacker, defender, damage, log) {
      var condition;
      if (!defender.isAlive()) {
        return;
      }
      condition = this.condition();
      if (!condition.isInflicted(defender) && Math.random() * 100 < this.chance) {
        return condition.inflict(defender);
      }
    };

    return ConditionEffect;

  })(DefaultEffect);

  module.exports = ConditionEffect;

}).call(this);
