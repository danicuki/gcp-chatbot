// Generated by CoffeeScript 1.12.7
(function() {
  var DefaultEffect, StatStageEffect,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  DefaultEffect = require('./defaultEffect');

  StatStageEffect = (function(superClass) {
    extend(StatStageEffect, superClass);

    function StatStageEffect() {
      return StatStageEffect.__super__.constructor.apply(this, arguments);
    }

    StatStageEffect.prototype.target = function(attacker, defender) {
      switch (this.id) {
        case 139:
        case 140:
        case 141:
        case 205:
        case 219:
        case 230:
        case 277:
        case 296:
        case 335:
          return attacker;
        case 21:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 272:
        case 297:
        case 331:
          return defender;
      }
    };

    StatStageEffect.prototype.stats = function() {
      switch (this.id) {
        case 69:
          return {
            attack: -1
          };
        case 70:
          return {
            defense: -1
          };
        case 72:
          return {
            spattack: -1
          };
        case 73:
          return {
            spdefense: -1
          };
        case 21:
        case 71:
        case 331:
          return {
            speed: -1
          };
        case 140:
          return {
            attack: 1
          };
        case 139:
          return {
            defense: 1
          };
        case 277:
          return {
            spattack: 1
          };
        case 219:
        case 296:
          return {
            speed: 1
          };
        case 205:
          return {
            spattack: -2
          };
        case 272:
        case 297:
          return {
            spdefense: -2
          };
        case 230:
          return {
            defense: -1,
            spdefense: -1
          };
        case 335:
          return {
            defense: -1,
            spdefense: -1,
            speed: -1
          };
        case 141:
          return {
            attack: 1,
            defense: 1,
            spattack: 1,
            spdefense: 1,
            speed: 1
          };
      }
    };

    StatStageEffect.prototype.buildMultiplier = function(attacker) {
      var change, stat, totalChanges;
      totalChanges = ((function() {
        var ref, results;
        ref = this.stats();
        results = [];
        for (stat in ref) {
          change = ref[stat];
          results.push(change);
        }
        return results;
      }).call(this)).reduce(function(x, y) {
        return x + y;
      });
      if (this.target(true, false)) {
        return 1 + 0.25 * totalChanges * this.chance / 100;
      } else {
        return 1 - 0.25 * totalChanges * this.chance / 100;
      }
    };

    StatStageEffect.prototype.battleMultiplier = function(attacker, defender, damage, lethal) {
      return this.buildMultiplier(attacker);
    };

    StatStageEffect.prototype.afterDamage = function(attacker, defender, damage, log) {
      var change, ref, results, stat, target;
      target = this.target(attacker, defender);
      if (Math.random() * 100 < this.chance && target.isAlive()) {
        ref = this.stats();
        results = [];
        for (stat in ref) {
          change = ref[stat];
          results.push(target.modifyStatStage(stat, change, log));
        }
        return results;
      }
    };

    return StatStageEffect;

  })(DefaultEffect);

  module.exports = StatStageEffect;

}).call(this);
