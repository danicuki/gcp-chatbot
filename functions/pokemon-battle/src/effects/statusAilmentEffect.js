// Generated by CoffeeScript 1.12.7
(function() {
  var BadPoisonStatusAilment, BurnStatusAilment, DefaultEffect, FreezeStatusAilment, ParalysisStatusAilment, PoisonStatusAilment, StatusAilmentEffect,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  DefaultEffect = require('./defaultEffect');

  BurnStatusAilment = require('../ailments/burnStatusAilment');

  ParalysisStatusAilment = require('../ailments/paralysisStatusAilment');

  FreezeStatusAilment = require('../ailments/freezeStatusAilment');

  PoisonStatusAilment = require('../ailments/poisonStatusAilment');

  BadPoisonStatusAilment = require('../ailments/badPoisonStatusAilment');

  StatusAilmentEffect = (function(superClass) {
    extend(StatusAilmentEffect, superClass);

    function StatusAilmentEffect() {
      return StatusAilmentEffect.__super__.constructor.apply(this, arguments);
    }

    StatusAilmentEffect.prototype.ailment = function() {
      switch (this.id) {
        case 3:
        case 78:
        case 210:
          return new PoisonStatusAilment;
        case 5:
        case 201:
        case 254:
        case 274:
          return new BurnStatusAilment;
        case 6:
        case 261:
        case 275:
          return new FreezeStatusAilment;
        case 7:
        case 153:
        case 263:
        case 276:
          return new ParalysisStatusAilment;
        case 203:
          return new BadPoisonStatusAilment;
      }
    };

    StatusAilmentEffect.prototype.buildMultiplier = function(attacker) {
      var ailment;
      ailment = this.ailment();
      return ailment.battleMultiplier(this.chance);
    };

    StatusAilmentEffect.prototype.battleMultiplier = function(attacker, defender, damage, lethal) {
      var ailment;
      ailment = this.ailment();
      if ((defender.ailment == null) && ailment.affects(defender)) {
        return ailment.battleMultiplier(this.chance);
      } else {
        return 1;
      }
    };

    StatusAilmentEffect.prototype.afterDamage = function(attacker, defender, damage, log) {
      var ailment;
      if ((defender.ailment != null) || !defender.isAlive()) {
        return;
      }
      ailment = this.ailment();
      if (ailment.affects(defender) && Math.random() * 100 < this.chance) {
        defender.ailment = ailment;
        return ailment.whenInflicted(defender, log);
      }
    };

    return StatusAilmentEffect;

  })(DefaultEffect);

  module.exports = StatusAilmentEffect;

}).call(this);
