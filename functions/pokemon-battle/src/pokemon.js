// Generated by CoffeeScript 1.12.7
(function() {
  var Move, Pokemon, Strategy, Type, fs;

  fs = require('fs');

  Type = require('./type');

  Move = require('./move');

  Strategy = require('./strategy');

  Pokemon = (function() {
    Pokemon.pokedex = JSON.parse(fs.readFileSync(__dirname + '/../data/pokemon.json').toString());

    function Pokemon(id) {
      var moveId, pokemon, typeId;
      pokemon = this.constructor.pokedex[id];
      if (pokemon == null) {
        throw new Error("Pokemon not found: " + id);
      }
      this.name = pokemon.name;
      this.types = (function() {
        var i, len, ref, results;
        ref = pokemon.types;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          typeId = ref[i];
          results.push(new Type(typeId));
        }
        return results;
      })();
      this.weight = pokemon.weight / 10;
      this.stats = {
        base: pokemon.stats,
        stage: {
          attack: 0,
          defense: 0,
          spattack: 0,
          spdefense: 0,
          speed: 0
        }
      };
      this.maxHp = 141 + 2 * pokemon.stats.hp;
      this.hp = this.maxHp;
      this.conditions = {};
      this.ailment = null;
      this.faintObservers = [];
      this.strategy = new Strategy(this);
      this.moves = this.strategy.chooseBuild((function() {
        var i, len, ref, results;
        ref = pokemon.moves;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          moveId = ref[i];
          results.push(new Move(moveId));
        }
        return results;
      })());
    }

    Pokemon.prototype.trainerAndName = function() {
      return this.name;
    };

    Pokemon.prototype.attack = function() {
      return this.stat('attack');
    };

    Pokemon.prototype.defense = function() {
      return this.stat('defense');
    };

    Pokemon.prototype.spattack = function() {
      return this.stat('spattack');
    };

    Pokemon.prototype.spdefense = function() {
      return this.stat('spdefense');
    };

    Pokemon.prototype.speed = function() {
      return this.stat('speed');
    };

    Pokemon.prototype.chooseMove = function(defender) {
      return this.move = this.strategy.chooseMove(defender);
    };

    Pokemon.prototype.takeDamage = function(damage, message, log) {
      var i, len, observer, ref;
      if (damage > this.hp) {
        damage = this.hp;
      }
      this.hp -= damage;
      message = message.replace('%(pokemon)', this.trainerAndName());
      message = message.replace('%(damage)', damage + " HP");
      log.message(message);
      if (!this.isAlive()) {
        ref = this.faintObservers;
        for (i = 0, len = ref.length; i < len; i++) {
          observer = ref[i];
          observer.notifyFaint(this);
        }
      }
      return damage;
    };

    Pokemon.prototype.isAlive = function() {
      return this.hp > 0;
    };

    Pokemon.prototype.subscribeToFaint = function(observer) {
      return this.faintObservers.push(observer);
    };

    Pokemon.prototype.stat = function(stat, options) {
      var ailmentMultiplier, stageMultiplier;
      if (options == null) {
        options = {};
      }
      if (options.ingorePositive == null) {
        options.ingorePositive = false;
      }
      if (options.ingoreNegative == null) {
        options.ingoreNegative = false;
      }
      stageMultiplier = this.statStageMultiplier(this.stats.stage[stat]);
      if (stageMultiplier > 1 && options.ingorePositive) {
        stageMultiplier = 1;
      }
      if (stageMultiplier < 1 && options.ingoreNegative) {
        stageMultiplier = 1;
      }
      ailmentMultiplier = 1;
      if (this.ailment != null) {
        ailmentMultiplier = this.ailment.statMultiplier(stat);
      }
      return 36 + 2 * this.stats.base[stat] * stageMultiplier * ailmentMultiplier;
    };

    Pokemon.prototype.statStageMultiplier = function(stage) {
      switch (stage) {
        case -6:
          return 2 / 8;
        case -5:
          return 2 / 7;
        case -4:
          return 2 / 6;
        case -3:
          return 2 / 5;
        case -2:
          return 2 / 4;
        case -1:
          return 2 / 3;
        case 0:
          return 1;
        case 1:
          return 1.5;
        case 2:
          return 2;
        case 3:
          return 2.5;
        case 4:
          return 3;
        case 5:
          return 3.5;
        case 6:
          return 4;
      }
    };

    Pokemon.prototype.statName = function(stat) {
      switch (stat) {
        case 'attack':
          return 'Attack';
        case 'defense':
          return 'Defense';
        case 'spattack':
          return 'Special Attack';
        case 'spdefense':
          return 'Special Defense';
        case 'speed':
          return 'Speed';
      }
    };

    Pokemon.prototype.modifyStatStage = function(stat, change, log) {
      var statName;
      statName = this.statName(stat);
      switch (false) {
        case !(this.stats.stage[stat] === 6 && change > 0):
          return log.message(this.trainerAndName()("'s " + statName + " cannot rise any higher."));
        case !(this.stats.stage[stat] === -6 && change < 0):
          return log.message(this.trainerAndName()("'s " + statName + " cannot fall any lower."));
        default:
          if (this.stats.stage[stat] + change > 6) {
            change = 6 - this.stats.stage[stat];
          }
          if (this.stats.stage[stat] + change < -6) {
            change = -6 - this.stats.stage[stat];
          }
          this.stats.stage[stat] += change;
          switch (change) {
            case 1:
              return log.message(this.trainerAndName() + "'s " + statName + " rose!");
            case 2:
              return log.message(this.trainerAndName() + "'s " + statName + " sharply rose!");
            case 3:
              return log.message(this.trainerAndName() + "'s " + statName + " drastically rose!");
            case -1:
              return log.message(this.trainerAndName() + "'s " + statName + " fell!");
            case -2:
              return log.message(this.trainerAndName() + "'s " + statName + " harshly fell!");
            case -3:
              return log.message(this.trainerAndName() + "'s " + statName + " severely fell!");
          }
      }
    };

    Pokemon.prototype.typeAdvantageAgainst = function(pokemon) {
      var type;
      return ((function() {
        var i, len, ref, results;
        ref = this.types;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          type = ref[i];
          if (type.effectiveAgainst(pokemon.types)) {
            results.push(type);
          }
        }
        return results;
      }).call(this)).length > 0;
    };

    Pokemon.prototype.canAttack = function(log) {
      var _, condition, ref;
      if ((this.ailment != null) && !this.ailment.canAttack(this, log)) {
        return false;
      }
      ref = this.conditions;
      for (_ in ref) {
        condition = ref[_];
        if (!condition.canAttack(this, log)) {
          return false;
        }
      }
      return true;
    };

    Pokemon.prototype.whenSwitchedOut = function() {
      this.move = null;
      if (this.ailment) {
        this.ailment.whenSwitchedOut(this);
      }
      return this.conditions = {};
    };

    Pokemon.prototype.endTurn = function(log) {
      var _, condition, ref, results;
      if (this.ailment != null) {
        this.ailment.endTurn(this, log);
      }
      ref = this.conditions;
      results = [];
      for (_ in ref) {
        condition = ref[_];
        results.push(condition.endTurn(this, log));
      }
      return results;
    };

    Pokemon.prototype.toString = function() {
      return this.name;
    };

    return Pokemon;

  })();

  module.exports = Pokemon;

}).call(this);

//# sourceMappingURL=pokemon.js.map
