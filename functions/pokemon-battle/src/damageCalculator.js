// Generated by CoffeeScript 1.12.7
(function() {
  var DamageCalculator,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  DamageCalculator = (function() {
    function DamageCalculator() {}

    DamageCalculator.prototype.calculate = function(move, attacker, defender, critical, random) {
      var attack, crit, defense, ref, stab, type;
      if (critical == null) {
        critical = false;
      }
      if (random == null) {
        random = 0.9;
      }
      attack = attacker.stat(move.attackStat(), {
        ingoreNegative: critical
      });
      defense = defender.stat(move.defenseStat(), {
        ingorePositive: critical
      });
      stab = (ref = move.type.id, indexOf.call(attacker.types.map(function(type) {
        return type.id;
      }), ref) >= 0) ? 1.5 : 1;
      type = move.effectiveness(attacker, defender);
      crit = critical ? 1.5 : 1;
      return this.formula(move.power(attacker, defender), attack, defense, stab * type * crit * random);
    };

    DamageCalculator.prototype.confusionDamage = function(pokemon) {
      var attack, defense, random;
      attack = pokemon.stat('attack');
      defense = pokemon.stat('defense');
      random = Math.random() * (1 - 0.85) + 0.85;
      return this.formula(40, attack, defense, random);
    };

    DamageCalculator.prototype.formula = function(power, attack, defense, multipliers) {
      return Math.round((0.88 * (attack / defense) * power + 2) * multipliers);
    };

    return DamageCalculator;

  })();

  module.exports = DamageCalculator;

}).call(this);
