// Generated by CoffeeScript 1.12.7
(function() {
  var Trainer;

  Trainer = (function() {
    function Trainer(name) {
      this.name = name;
      this.team = [];
    }

    Trainer.prototype.addPokemon = function(pokemon) {
      pokemon.trainer = this;
      return this.team.push(pokemon);
    };

    Trainer.prototype.ablePokemon = function() {
      var i, len, pokemon, ref, results;
      ref = this.team;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        pokemon = ref[i];
        if (pokemon.isAlive()) {
          results.push(pokemon);
        }
      }
      return results;
    };

    Trainer.prototype.firstPokemon = function() {
      return this.mainPokemon = this.team[0];
    };

    Trainer.prototype.maybeSwitchOut = function(own, opponent, log) {
      var pokemon;
      if (Math.random() < 0.67) {
        return own;
      }
      if (!opponent.typeAdvantageAgainst(own)) {
        return own;
      }
      if (!(((function() {
        var i, len, ref, results;
        ref = this.ablePokemon();
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          pokemon = ref[i];
          if (!opponent.typeAdvantageAgainst(pokemon)) {
            results.push(pokemon);
          }
        }
        return results;
      }).call(this)).length > 0)) {
        return own;
      }
      log.message(this.nameOrYou() + " withdrew " + own + ".");
      this.switchPokemon(opponent, log);
      return this.mainPokemon;
    };

    Trainer.prototype.switchPokemon = function(opponent, log) {
      var bestChoices, candidates, i, len, maxScore, pokemon;
      this.mainPokemon.stats.stage = {
        attack: 0,
        defense: 0,
        spattack: 0,
        spdefense: 0,
        speed: 0
      };
      candidates = (function() {
        var i, len, ref, results;
        ref = this.ablePokemon();
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          pokemon = ref[i];
          if (pokemon !== this.mainPokemon) {
            results.push(pokemon);
          }
        }
        return results;
      }).call(this);
      maxScore = -1;
      for (i = 0, len = candidates.length; i < len; i++) {
        pokemon = candidates[i];
        pokemon.score = 0;
        if (pokemon.typeAdvantageAgainst(opponent)) {
          pokemon.score += 1;
        }
        if (opponent.typeAdvantageAgainst(pokemon)) {
          pokemon.score -= 1;
        }
        if (pokemon.score > maxScore) {
          maxScore = pokemon.score;
        }
      }
      bestChoices = (function() {
        var j, len1, results;
        results = [];
        for (j = 0, len1 = candidates.length; j < len1; j++) {
          pokemon = candidates[j];
          if (pokemon.score === maxScore) {
            results.push(pokemon);
          }
        }
        return results;
      })();
      this.mainPokemon = bestChoices[Math.floor(Math.random() * bestChoices.length)];
      if (this.mainPokemon != null) {
        this.mainPokemon.whenSwitchedOut();
      }
      log.message(this.nameOrYou() + " took out " + this.mainPokemon + ".");
      return this.mainPokemon;
    };

    Trainer.prototype.nameOrYou = function() {
      if (this.name != null) {
        return this.name;
      } else {
        return 'you';
      }
    };

    return Trainer;

  })();

  module.exports = Trainer;

}).call(this);
