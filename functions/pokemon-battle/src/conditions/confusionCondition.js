// Generated by CoffeeScript 1.12.7
(function() {
  var Condition, ConfusionCondition, DamageCalculator,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Condition = require('./condition');

  DamageCalculator = require('../damageCalculator');

  ConfusionCondition = (function(superClass) {
    extend(ConfusionCondition, superClass);

    function ConfusionCondition() {
      return ConfusionCondition.__super__.constructor.apply(this, arguments);
    }

    ConfusionCondition.prototype.whenInflicted = function(pokemon, log) {
      return this.turnsLeft = Math.ceil(Math.random() * 4);
    };

    ConfusionCondition.prototype.canAttack = function(pokemon, log) {
      var damage, damageCalculator;
      if (this.turnsLeft === 0) {
        log.message(pokemon.trainerAndName() + " snapped out its confusion!");
        this.heal(pokemon);
      } else {
        log.message(pokemon.trainerAndName() + " is confused!");
        this.turnsLeft--;
        if (Math.random() < 0.5) {
          damageCalculator = new DamageCalculator;
          damage = damageCalculator.confusionDamage(pokemon);
          pokemon.takeDamage(damage, "It hurn itself %(damage) in its confusion!", log);
          return false;
        }
      }
      return true;
    };

    ConfusionCondition.prototype.buildMultiplier = function(attacker, chance) {
      return 1 + 0.4 * chance / 100;
    };

    ConfusionCondition.prototype.battleMultiplier = function(attacker, defender, chance) {
      return this.buildMultiplier(attacker, chance);
    };

    return ConfusionCondition;

  })(Condition);

  module.exports = ConfusionCondition;

}).call(this);
