// Generated by CoffeeScript 1.12.7
(function() {
  var Condition, FlinchCondition,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Condition = require('./condition');

  FlinchCondition = (function(superClass) {
    extend(FlinchCondition, superClass);

    function FlinchCondition() {
      return FlinchCondition.__super__.constructor.apply(this, arguments);
    }

    FlinchCondition.prototype.endTurn = function(pokemon, log) {
      return this.heal(pokemon);
    };

    FlinchCondition.prototype.canAttack = function(pokemon, log) {
      log.message(pokemon.trainerAndName() + " flinched and couldn't move!");
      return false;
    };

    FlinchCondition.prototype.buildMultiplier = function(attacker, chance) {
      if (attacker.stats.base.speed >= 80) {
        return 1 + 0.2 * chance / 30;
      } else {
        return 1;
      }
    };

    FlinchCondition.prototype.battleMultiplier = function(attacker, defender, chance) {
      if (attacker.speed() > defender.speed()) {
        return 1 + 0.2 * chance / 30;
      } else {
        return 1;
      }
    };

    return FlinchCondition;

  })(Condition);

  module.exports = FlinchCondition;

}).call(this);
