// Generated by CoffeeScript 1.12.7
(function() {
  var Type, fs;

  fs = require('fs');

  Type = (function() {
    Type.typedex = JSON.parse(fs.readFileSync(__dirname + '/../data/types.json').toString());

    Type.all = function() {
      var dummy, ref, results, typeId;
      ref = this.typedex;
      results = [];
      for (typeId in ref) {
        dummy = ref[typeId];
        results.push(new Type(typeId));
      }
      return results;
    };

    function Type(id) {
      var type;
      type = this.constructor.typedex[id];
      if (type == null) {
        throw new Error("Type not found: " + id);
      }
      this.id = type.id;
      this.name = type.name;
      this.offense = type.offense;
      this.defense = type.defense;
    }

    Type.prototype.effectivenessAgainst = function(types) {
      if (!(types instanceof Array)) {
        types = [types];
      }
      return types.reduce((function(_this) {
        return function(multiplier, type) {
          return multiplier * _this.offense[type.id];
        };
      })(this), 1);
    };

    Type.prototype.effectiveAgainst = function(types) {
      return (this.effectivenessAgainst(types)) > 1;
    };

    Type.prototype.weaknesses = function() {
      var effectiveness, typeId;
      return (function() {
        var ref, results;
        ref = this.defense;
        results = [];
        for (typeId in ref) {
          effectiveness = ref[typeId];
          if (effectiveness > 1) {
            results.push(new this.constructor(typeId));
          }
        }
        return results;
      }).call(this);
    };

    Type.prototype.strengths = function() {
      var effectiveness, typeId;
      return (function() {
        var ref, results;
        ref = this.offense;
        results = [];
        for (typeId in ref) {
          effectiveness = ref[typeId];
          if (effectiveness > 1) {
            results.push(new this.constructor(typeId));
          }
        }
        return results;
      }).call(this);
    };

    Type.prototype.toString = function() {
      return this.name;
    };

    return Type;

  })();

  module.exports = Type;

}).call(this);
