// Generated by CoffeeScript 1.12.7
(function() {
  var PoisonStatusAilment, StatusAilment,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  StatusAilment = require('./statusAilment');

  PoisonStatusAilment = (function(superClass) {
    extend(PoisonStatusAilment, superClass);

    function PoisonStatusAilment() {
      this.multiplier = 1 / 8;
    }

    PoisonStatusAilment.prototype.affects = function(pokemon) {
      var type, types;
      types = (function() {
        var i, len, ref, results;
        ref = pokemon.types;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          type = ref[i];
          results.push(type.name);
        }
        return results;
      })();
      return (indexOf.call(types, 'Poison') < 0) && (indexOf.call(types, 'Steel') < 0);
    };

    PoisonStatusAilment.prototype.whenInflicted = function(pokemon, log) {
      return log.message(pokemon.trainerAndName() + " was poisoned!");
    };

    PoisonStatusAilment.prototype.endTurn = function(pokemon, log) {
      return pokemon.takeDamage(Math.round(pokemon.maxHp * this.multiplier), "%(pokemon) was hurt %(damage) by poison!", log);
    };

    PoisonStatusAilment.prototype.battleMultiplier = function(chance) {
      return 1 + 0.4 * chance / 100;
    };

    return PoisonStatusAilment;

  })(StatusAilment);

  module.exports = PoisonStatusAilment;

}).call(this);
